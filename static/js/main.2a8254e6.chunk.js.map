{"version":3,"sources":["redux/country/types.tsx","reportWebVitals.ts","assets/colors/themes/default.ts","services/country/index.tsx","redux/country/index.tsx","redux/reducers.tsx","redux/store.tsx","scenes/countries/styles.ts","components/Card/styles.ts","components/Card/index.tsx","components/SearchInput/styles.ts","components/SearchInput/index.tsx","services/country/queries/index.tsx","utils/consts/index.tsx","redux/country/actions.tsx","scenes/countries/index.tsx","components/EditInput/styles.ts","components/EditInput/index.tsx","scenes/countries/details/styles.tsx","scenes/countries/details/index.tsx","components/Routes/index.tsx","index.tsx"],"names":["CountryTypes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultTheme","palette","alto","transparent","white","scienceblue","dodgerBlue","scorpion","font","Light","Regular","Medium","Bold","client","ApolloClient","uri","cache","InMemoryCache","initialState","list","loading","error","reducer","state","action","type","SET_LOADING","payload","GET_LIST","ERROR","CLEAR_ERROR","CHANGE","RESET","combineReducers","country","CountryReducer","store","createStore","Reducers","applyMiddleware","ReduxThunk","HeaderDefault","Layout","Header","LayoutStyled","styled","div","theme","ContentStyled","Content","HeaderContent","Container","Flag","url","Title","Typography","Text","Capital","Card","data","numericCode","nativeName","capital","svgFile","flag","history","useHistory","handleClick","useCallback","push","onClick","Input","InputDefault","Icon","SearchIcon","SearchOutlined","SearchInput","onSearch","useState","filter","setFilter","placeholder","onChange","target","value","onPressEnter","COUNTRY_LIST_QUERY","gql","COUNTRY","mergeCountryList","changes","localStorage","getItem","JSON","parse","forEach","changedItem","find","item","values","Object","keys","key","index","change","field","getState","changeList","String","split","map","v","name","setItem","stringify","CountryScreen","filtered","setFiltered","dispatch","useDispatch","useSelector","useEffect","query","countryList","Country","area","population","topLevelDomains","catch","message","handleFilter","toUpperCase","includes","grid","column","xs","sm","md","lg","dataSource","renderItem","locale","emptyText","pagination","defaultPageSize","showSizeChanger","InputContent","EditIcon","EditOutlined","SaveIcon","SaveOutlined","InputStyled","EditInput","width","onSave","disabled","setDisabled","internalValue","setInternalValue","setType","Number","isNaN","RenderIcon","handleChange","e","inputValue","test","newState","styleWidth","ResetButton","Button","attrs","source","FlagContainer","Col","ColAntd","LeftArrow","ArrowLeftOutlined","DetailScreen","setData","countryId","useParams","topLevelDomain","useMemo","goBack","placement","title","onConfirm","findIndex","splice","resetInfo","okText","cancelText","Routes","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a8254e6.chunk.js","sourcesContent":["import { Country } from '~/domain/country';\r\n\r\nexport enum CountryTypes {\r\n  GET_LIST = '@country/GET_LIST',\r\n  SET_LOADING = '@country/SET_LOADING',\r\n  ERROR = '@country/ERROR',\r\n  CLEAR_ERROR = '@country/CLEAR_ERROR',\r\n  CHANGE = '@country/CHANGE',\r\n  RESET = '@country/RESET',\r\n}\r\n\r\nexport interface CountryState {\r\n  loading: boolean;\r\n  list: Country[];\r\n  error: string | null;\r\n}\r\n\r\ninterface ClearError {\r\n  type: CountryTypes.CLEAR_ERROR;\r\n}\r\n\r\ninterface GetCountryList {\r\n  type: CountryTypes.GET_LIST;\r\n  payload: {\r\n    list: Country[];\r\n  };\r\n}\r\n\r\ninterface SetLoading {\r\n  type: CountryTypes.SET_LOADING;\r\n  payload: {\r\n    loading: boolean;\r\n  };\r\n}\r\n\r\ninterface Error {\r\n  type: CountryTypes.ERROR;\r\n  payload: {\r\n    error: string;\r\n  };\r\n}\r\n\r\ninterface Change {\r\n  type: CountryTypes.CHANGE;\r\n  payload: {\r\n    list: Country[];\r\n  };\r\n}\r\n\r\ninterface Reset {\r\n  type: CountryTypes.RESET;\r\n  payload: {\r\n    list: Country[];\r\n  };\r\n}\r\n\r\nexport type CountryActions =\r\n  | ClearError\r\n  | GetCountryList\r\n  | SetLoading\r\n  | Error\r\n  | Change\r\n  | Reset;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { DefaultTheme } from 'styled-components';\n\nconst defaultTheme: DefaultTheme = {\n  palette: {\n    alto: '#d9d9d9',\n    transparent: 'transparent',\n    white: '#ffffff',\n    scienceblue: '#0b6ed6',\n    dodgerBlue: '#40a9ff',\n    scorpion: '#595757',\n  },\n  font: {\n    Light: 'Light',\n    Regular: 'Regular',\n    Medium: 'Medium',\n    Bold: 'Bold',\n  },\n};\n\nexport default defaultTheme;\n","import { ApolloClient, InMemoryCache } from '@apollo/client';\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'https://countries-274616.ew.r.appspot.com',\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport default client;\r\n","import { Reducer } from 'redux';\r\nimport { CountryState, CountryTypes } from './types';\r\n\r\nconst initialState: CountryState = {\r\n  list: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst reducer: Reducer<CountryState> = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CountryTypes.SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: action.payload.loading,\r\n      };\r\n    case CountryTypes.GET_LIST:\r\n      return {\r\n        ...state,\r\n        list: action.payload.list,\r\n        loading: false,\r\n      };\r\n    case CountryTypes.ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n      };\r\n    case CountryTypes.CLEAR_ERROR:\r\n      return {\r\n        ...state,\r\n        error: null,\r\n      };\r\n    case CountryTypes.CHANGE:\r\n    case CountryTypes.RESET:\r\n      return {\r\n        ...state,\r\n        list: action.payload.list,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from 'redux';\r\nimport CountryReducer from './country';\r\n\r\nexport default combineReducers({\r\n  country: CountryReducer,\r\n});\r\n","import { applyMiddleware, createStore, Store } from 'redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport { CountryState } from './country/types';\r\nimport Reducers from './reducers';\r\n\r\nexport interface ApplicationState {\r\n  country: CountryState;\r\n}\r\n\r\nconst store: Store<ApplicationState> = createStore(\r\n  Reducers,\r\n  applyMiddleware(ReduxThunk)\r\n);\r\n\r\nexport default store;\r\n","import styled from 'styled-components';\nimport { Layout } from 'antd';\n\nconst { Header: HeaderDefault } = Layout;\n\nexport const Container = styled.div``;\n\nexport const LayoutStyled = styled(Layout)`\n  background-color: ${({ theme: { palette } }) => palette.transparent};\n  height: 100vh;\n  margin: auto;\n  width: 60%;\n\n  @media (max-width: 1800px) {\n    width: 80%;\n  }\n\n  @media (max-width: 1400px) {\n    width: 100%;\n  }\n`;\n\nexport const ContentStyled = styled(Layout.Content)`\n  background-color: ${({ theme: { palette } }) => palette.transparent};\n  padding-top: 75px;\n`;\n\nexport const Header = styled(HeaderDefault)`\n  align-items: center;\n  background: ${({ theme: { palette } }) => palette.transparent};\n  display: flex;\n  justify-content: center;\n  position: fixed;\n  width: 60%;\n  z-index: 999;\n  padding: 0 10px;\n\n  @media (max-width: 1800px) {\n    width: 80%;\n  }\n\n  @media (max-width: 1400px) {\n    width: 100%;\n  }\n`;\n\nexport const HeaderContent = styled.div`\n  align-items: center;\n  background: ${({ theme: { palette } }) => palette.transparent};\n  display: flex;\n  background: rgba(255, 255, 255, 0.15);\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n  backdrop-filter: blur(2.5px);\n  border: 1px solid rgba(255, 255, 255, 0.18);\n  -webkit-backdrop-filter: blur(2.5px);\n  border-bottom-right-radius: 5px;\n  border-bottom-left-radius: 5px;\n  width: 100%;\n  height: 100%;\n`;\n","import styled from 'styled-components';\nimport { Typography } from 'antd';\n\nexport const Container = styled.div`\n  align-items: center;\n  display: flex;\n  padding: 15px;\n  margin: 10px;\n  flex-direction: column;\n  transition: 0.5s;\n\n  background: rgba(255, 255, 255, 0.15);\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n  backdrop-filter: blur(2.5px);\n  -webkit-backdrop-filter: blur(2.5px);\n  border-radius: 5px;\n  border: 1px solid rgba(255, 255, 255, 0.18);\n\n  height: 230px;\n\n  &:hover {\n    cursor: pointer;\n    background: rgba(255, 255, 255, 0.5);\n  }\n\n  @media (max-width: 770px) {\n    height: auto;\n  }\n`;\n\n// eslint-disable-next-line no-undef\nexport const Flag = styled.div<{ url: string }>`\n  background-image: url(${({ url }) => url});\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 5px;\n  height: 125px;\n  width: 200px;\n\n  @media (max-width: 767px) {\n    height: 250px;\n    width: 400px;\n  }\n\n  @media (max-width: 480px) {\n    height: 150px;\n    width: 200px;\n  }\n`;\n\nexport const Title = styled(Typography.Text)`\n  font-family: ${({ theme: { font } }) => font.Medium};\n  font-size: 22px;\n  margin-top: 15px;\n  text-align: center;\n`;\n\nexport const Capital = styled(Typography.Text)`\n  font-family: ${({ theme: { font } }) => font.Regular};\n  font-size: 16px;\n  text-align: center;\n`;\n","import React, { useCallback } from 'react';\nimport { useHistory } from 'react-router';\nimport { Country } from '~/domain/country';\nimport { Capital, Container, Flag, Title } from './styles';\n\ninterface CardType {\n  data: Country;\n}\n\nconst Card: React.FC<CardType> = ({\n  data: {\n    numericCode,\n    nativeName,\n    capital,\n    flag: { svgFile },\n  },\n}) => {\n  const history = useHistory();\n\n  const handleClick = useCallback(\n    () => history.push(`/detail/${numericCode}`),\n    [numericCode, history]\n  );\n\n  return (\n    <Container onClick={handleClick}>\n      <Flag url={svgFile} />\n      <Title>{nativeName}</Title>\n      <Capital>{capital}</Capital>\n    </Container>\n  );\n};\n\nexport default Card;\n","import styled from 'styled-components';\r\nimport { Input as InputDefault } from 'antd';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\n\r\nexport const Container = styled.div`\r\n  justify-content: center;\r\n  display: flex;\r\n  flex-direction: row;\r\n  height: 40px;\r\n  width: 100%;\r\n`;\r\n\r\nexport const Input = styled(InputDefault)`\r\n  border-radius: 25px;\r\n  border-top-right-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  padding-left: 25px;\r\n  width: 50%;\r\n\r\n  @media (max-width: 1400px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nexport const Icon = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme: { palette } }) => palette.white};\r\n  border-bottom-right-radius: 25px;\r\n  border-top-right-radius: 25px;\r\n  border: 1px solid ${({ theme: { palette } }) => palette.alto};\r\n  border-left-width: 0;\r\n  transition: 0.5s;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 60px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    border: 1px solid ${({ theme: { palette } }) => palette.dodgerBlue};\r\n    border-left-width: 0;\r\n  }\r\n`;\r\n\r\nexport const SearchIcon = styled(SearchOutlined)`\r\n  font-size: 22px;\r\n  transition: 0.5s;\r\n\r\n  ${Icon}:hover & {\r\n    color: ${({ theme: { palette } }) => palette.dodgerBlue};\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { Container, Icon, Input, SearchIcon } from './styles';\r\n\r\ninterface SearchInputType {\r\n  onSearch(filter: string): void;\r\n}\r\n\r\nconst SearchInput: React.FC<SearchInputType> = ({ onSearch }) => {\r\n  const [filter, setFilter] = useState<string>('');\r\n  return (\r\n    <Container>\r\n      <Input\r\n        placeholder=\"Buscar\"\r\n        onChange={({ target }) => setFilter(target.value)}\r\n        onPressEnter={() => onSearch(filter)}\r\n      />\r\n      <Icon onClick={() => onSearch(filter)}>\r\n        <SearchIcon />\r\n      </Icon>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const COUNTRY_LIST_QUERY = gql`\r\n  query {\r\n    Country {\r\n      numericCode\r\n      nativeName\r\n      area\r\n      population\r\n      capital\r\n      flag {\r\n        svgFile\r\n      }\r\n      topLevelDomains {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export const COUNTRY = '@country';\r\n","import { Dispatch } from 'redux';\r\nimport { ChangeFields, Country, CountryData } from '~/domain/country';\r\nimport client from '~/services/country';\r\nimport { COUNTRY_LIST_QUERY } from '~/services/country/queries';\r\nimport { COUNTRY } from '~/utils/consts';\r\nimport store from '~/redux/store';\r\nimport { CountryActions, CountryTypes } from './types';\r\n\r\nconst mergeCountryList = (list: Country[]): Country[] => {\r\n  const changes = localStorage.getItem(COUNTRY);\r\n  const changeList: { [key: string]: string | number }[] = changes\r\n    ? JSON.parse(changes)\r\n    : [];\r\n\r\n  changeList.forEach((changedItem) => {\r\n    const country: any = list.find(\r\n      (item) => item.numericCode === changedItem.numericCode\r\n    );\r\n\r\n    if (country) {\r\n      const values = Object.values(changedItem);\r\n      Object.keys(changedItem).forEach((key, index) => {\r\n        if (key !== 'numericCode') {\r\n          country[key] = values[index];\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  return list;\r\n};\r\n\r\nexport const getCountryList = () => (dispatch: Dispatch<CountryActions>) => {\r\n  dispatch({\r\n    type: CountryTypes.SET_LOADING,\r\n    payload: {\r\n      loading: true,\r\n    },\r\n  });\r\n\r\n  client\r\n    .query<CountryData>({\r\n      query: COUNTRY_LIST_QUERY,\r\n    })\r\n    .then(({ data }) => {\r\n      const countryList: Country[] = data.Country.map((country) => ({\r\n        numericCode: country.numericCode,\r\n        nativeName: country.nativeName,\r\n        area: country.area,\r\n        population: country.population,\r\n        capital: country.capital,\r\n        flag: country.flag,\r\n        topLevelDomains: country.topLevelDomains,\r\n      }));\r\n\r\n      dispatch({\r\n        type: CountryTypes.GET_LIST,\r\n        payload: {\r\n          list: mergeCountryList(countryList),\r\n        },\r\n      });\r\n    })\r\n    .catch(() => {\r\n      dispatch({\r\n        type: CountryTypes.ERROR,\r\n        payload: {\r\n          error: 'Ocorreu um erro ao carregar os dados, tente novamente.',\r\n        },\r\n      });\r\n    });\r\n};\r\n\r\nexport const clearError = (): CountryActions => ({\r\n  type: CountryTypes.CLEAR_ERROR,\r\n});\r\n\r\nexport const change = (\r\n  numericCode: string,\r\n  field: ChangeFields,\r\n  value: string | number\r\n): CountryActions => {\r\n  const { list } = store.getState().country;\r\n  const changes = localStorage.getItem(COUNTRY);\r\n  const changeList: {\r\n    [key: string]: string | number | { name: string }[];\r\n  }[] = changes ? JSON.parse(changes) : [];\r\n\r\n  const country = changeList.find((item) => item.numericCode === numericCode);\r\n\r\n  if (country) {\r\n    country[field] =\r\n      field === 'topLevelDomains'\r\n        ? String(value)\r\n            .split(',')\r\n            .map((v) => ({ name: v }))\r\n        : value;\r\n  } else {\r\n    changeList.push({\r\n      numericCode,\r\n      [field]:\r\n        field === 'topLevelDomains'\r\n          ? String(value)\r\n              .split(',')\r\n              .map((v) => ({ name: v }))\r\n          : value,\r\n    });\r\n  }\r\n\r\n  localStorage.setItem(COUNTRY, JSON.stringify(changeList));\r\n\r\n  return {\r\n    type: CountryTypes.CHANGE,\r\n    payload: {\r\n      list: mergeCountryList(list),\r\n    },\r\n  };\r\n};\r\n\r\nexport const resetInfo = (numericCode: string) => {\r\n  const { list } = store.getState().country;\r\n  const changes = localStorage.getItem(COUNTRY);\r\n  const changeList: { [key: string]: string | number }[] = changes\r\n    ? JSON.parse(changes)\r\n    : [];\r\n\r\n  if (changeList) {\r\n    const index = changeList.findIndex(\r\n      (item) => item.numericCode === numericCode\r\n    );\r\n\r\n    if (index > -1) {\r\n      changeList.splice(index, 1);\r\n      localStorage.setItem(COUNTRY, JSON.stringify(changeList));\r\n    }\r\n  }\r\n\r\n  return {\r\n    type: CountryTypes.RESET,\r\n    payload: {\r\n      list: mergeCountryList(list),\r\n    },\r\n  };\r\n};\r\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { List, message } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LayoutStyled, ContentStyled, Header, HeaderContent } from './styles';\nimport Card from '~/components/Card';\nimport SearchInput from '~/components/SearchInput';\nimport { getCountryList } from '~/redux/country/actions';\nimport { ApplicationState } from '~/redux/store';\nimport { Country } from '~/domain/country';\n\nconst CountryScreen: React.FC = () => {\n  const [filtered, setFiltered] = useState<any[]>([]);\n\n  const dispatch = useDispatch();\n\n  const list = useSelector(({ country }: ApplicationState) => country.list);\n  const loading = useSelector(\n    ({ country }: ApplicationState) => country.loading\n  );\n  const error = useSelector(({ country }: ApplicationState) => country.error);\n\n  useEffect(() => {\n    dispatch(getCountryList());\n  }, []);\n\n  useEffect(() => {\n    setFiltered(list);\n  }, [list]);\n\n  useEffect(() => {\n    if (error) {\n      message.error(error);\n    }\n  }, [error]);\n\n  const handleFilter = useCallback((filter: string) => {\n    setFiltered(\n      list.filter((item) =>\n        item.nativeName.toUpperCase().includes(filter.toUpperCase())\n      )\n    );\n  }, []);\n\n  return (\n    <LayoutStyled>\n      <Header>\n        <HeaderContent>\n          <SearchInput onSearch={handleFilter} />\n        </HeaderContent>\n      </Header>\n      <ContentStyled>\n        <List\n          grid={{ column: 4, xs: 1, sm: 1, md: 2, lg: 3 }}\n          dataSource={filtered}\n          renderItem={(item: Country) => <Card data={item} />}\n          locale={{ emptyText: 'Nenhum resultado encontrado' }}\n          pagination={{\n            defaultPageSize: 12,\n            showSizeChanger: false,\n          }}\n          loading={loading}\n        />\n      </ContentStyled>\n    </LayoutStyled>\n  );\n};\n\nexport default CountryScreen;\n","import { EditOutlined, SaveOutlined } from '@ant-design/icons';\r\nimport { Typography, Input } from 'antd';\r\nimport styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px 0;\r\n`;\r\n\r\nexport const Title = styled(Typography.Text)`\r\n  color: ${({ theme: { palette } }) => palette.scorpion};\r\n  font-family: ${({ theme: { font } }) => font.Regular};\r\n  font-size: 14px;\r\n  -webkit-touch-callout: none;\r\n  -webkit-user-select: none;\r\n  -khtml-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n`;\r\n\r\nexport const InputContent = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Icon = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme: { palette } }) => palette.white};\r\n  border-radius: 2px;\r\n  border: 1px solid ${({ theme: { palette } }) => palette.alto};\r\n  border-left-width: 0;\r\n  display: flex;\r\n  height: 40px;\r\n  justify-content: center;\r\n  width: 40px;\r\n  transition: 0.5s;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    border: 1px solid ${({ theme: { palette } }) => palette.dodgerBlue};\r\n  }\r\n`;\r\n\r\nexport const EditIcon = styled(EditOutlined)`\r\n  font-size: 16px;\r\n  transition: 0.5s;\r\n\r\n  ${Icon}:hover & {\r\n    color: ${({ theme: { palette } }) => palette.dodgerBlue};\r\n  }\r\n`;\r\n\r\nexport const SaveIcon = styled(SaveOutlined)`\r\n  font-size: 16px;\r\n  transition: 0.5s;\r\n\r\n  ${Icon}:hover & {\r\n    color: ${({ theme: { palette } }) => palette.dodgerBlue};\r\n  }\r\n`;\r\n\r\n// eslint-disable-next-line no-undef\r\nexport const InputStyled = styled(Input)<{ styleWidth: number }>`\r\n  height: 40px;\r\n  width: auto;\r\n`;\r\n","import React, { ChangeEvent, useCallback, useEffect, useState } from 'react';\r\nimport {\r\n  Container,\r\n  EditIcon,\r\n  Icon,\r\n  InputContent,\r\n  InputStyled,\r\n  SaveIcon,\r\n  Title,\r\n} from './styles';\r\n\r\ninterface EditInputType {\r\n  placeholder: string;\r\n  value: string | number;\r\n  width?: number;\r\n  onSave(value: string | number): void;\r\n}\r\n\r\nconst EditInput: React.FC<EditInputType> = ({\r\n  placeholder,\r\n  value,\r\n  width,\r\n  onSave,\r\n}) => {\r\n  const [disabled, setDisabled] = useState<boolean>(true);\r\n  const [internalValue, setInternalValue] = useState<string | number>(value);\r\n  const [type, setType] = useState<'string' | 'number'>('string');\r\n\r\n  useEffect(() => {\r\n    setInternalValue(value);\r\n    setType(Number.isNaN(Number(value)) ? 'string' : 'number');\r\n  }, [value]);\r\n\r\n  const RenderIcon = useCallback(() => {\r\n    if (disabled) {\r\n      return <EditIcon />;\r\n    }\r\n\r\n    return <SaveIcon />;\r\n  }, [disabled]);\r\n\r\n  const handleChange = useCallback(\r\n    (e: ChangeEvent<HTMLInputElement>) => {\r\n      const { value: inputValue } = e.target;\r\n      if (type === 'string') {\r\n        setInternalValue(inputValue);\r\n      } else {\r\n        const reg = /^-?\\d*(\\.\\d*)?$/;\r\n        if (\r\n          (!Number.isNaN(Number(inputValue)) && reg.test(inputValue)) ||\r\n          value === '' ||\r\n          value === '-'\r\n        ) {\r\n          setInternalValue(inputValue);\r\n        }\r\n      }\r\n    },\r\n    [type]\r\n  );\r\n\r\n  const handleClick = useCallback(() => {\r\n    const newState = !disabled;\r\n    setDisabled(newState);\r\n\r\n    if (newState) {\r\n      onSave(internalValue);\r\n    }\r\n  }, [disabled, internalValue]);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>{placeholder}</Title>\r\n      <InputContent>\r\n        <InputStyled\r\n          placeholder={placeholder}\r\n          value={internalValue}\r\n          disabled={disabled}\r\n          onChange={handleChange}\r\n          styleWidth={width ?? 0}\r\n        />\r\n        <Icon onClick={handleClick}>\r\n          <RenderIcon />\r\n        </Icon>\r\n      </InputContent>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default EditInput;\r\n","import { ArrowLeftOutlined } from '@ant-design/icons';\r\nimport { Button, Layout, Col as ColAntd } from 'antd';\r\nimport styled from 'styled-components';\r\n\r\nexport const LayoutStyled = styled(Layout)`\r\n  background-color: ${({ theme: { palette } }) => palette.transparent};\r\n  height: 100vh;\r\n  margin: auto;\r\n  width: 40%;\r\n\r\n  @media (max-width: 1300px) {\r\n    width: 60%;\r\n  }\r\n\r\n  @media (max-width: 850px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nexport const ContentStyled = styled(Layout.Content)`\r\n  background-color: ${({ theme: { palette } }) => palette.transparent};\r\n  padding-top: 75px;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  padding: 25px;\r\n  border-radius: 5px;\r\n\r\n  background: rgba(255, 255, 255, 0.15);\r\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\r\n  backdrop-filter: blur(2.5px);\r\n  border: 1px solid rgba(255, 255, 255, 0.18);\r\n  -webkit-backdrop-filter: blur(2.5px);\r\n  border-bottom-right-radius: 5px;\r\n  border-bottom-left-radius: 5px;\r\n`;\r\n\r\nexport const ResetButton = styled(Button).attrs(() => ({\r\n  type: 'primary',\r\n}))`\r\n  height: 40px;\r\n  margin-top: 22px;\r\n  width: 214px;\r\n`;\r\n\r\n// eslint-disable-next-line no-undef\r\nexport const Flag = styled.div<{ source: string }>`\r\n  background-image: url(${({ source }) => source});\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n  background-size: cover;\r\n  border-radius: 5px;\r\n  height: 150px;\r\n  width: 250px;\r\n`;\r\n\r\nexport const FlagContainer = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 25px;\r\n`;\r\n\r\nexport const Col = styled(ColAntd).attrs(() => ({\r\n  xs: 24,\r\n  sm: 24,\r\n  md: 12,\r\n}))`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const LeftArrow = styled(ArrowLeftOutlined)`\r\n  color: ${({ theme: { palette } }) => palette.scorpion};\r\n  font-size: 18px;\r\n  position: absolute;\r\n\r\n  @media (max-width: 442px) {\r\n    top: 5px;\r\n    left: 10px;\r\n  }\r\n`;\r\n","import React, { useEffect, useMemo, useState } from 'react';\r\nimport { Row, Popconfirm } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport EditInput from '~/components/EditInput';\r\nimport { DetailScreenParams } from '~/components/Routes';\r\nimport { Country } from '~/domain/country';\r\nimport { ApplicationState } from '~/redux/store';\r\nimport {\r\n  Container,\r\n  ContentStyled,\r\n  Flag,\r\n  FlagContainer,\r\n  LayoutStyled,\r\n  ResetButton,\r\n  Col,\r\n  LeftArrow,\r\n} from './styles';\r\nimport { change, resetInfo } from '~/redux/country/actions';\r\n\r\nconst DetailScreen: React.FC = () => {\r\n  const [data, setData] = useState<Country>();\r\n\r\n  const { countryId } = useParams<DetailScreenParams>();\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const list = useSelector((state: ApplicationState) => state.country.list);\r\n\r\n  useEffect(() => {\r\n    setData(list.find((item) => item.numericCode === countryId));\r\n  }, [list, countryId]);\r\n\r\n  const topLevelDomain = useMemo(() => {\r\n    let value = '';\r\n    data?.topLevelDomains.forEach(({ name }) => {\r\n      value += `${value ? ', ' : ''}${name}`;\r\n    });\r\n\r\n    return value;\r\n  }, [data]);\r\n\r\n  return (\r\n    <LayoutStyled>\r\n      <ContentStyled>\r\n        <Container>\r\n          <LeftArrow onClick={() => history.goBack()} />\r\n          <FlagContainer>\r\n            <Flag source={data?.flag.svgFile ?? ''} />\r\n          </FlagContainer>\r\n\r\n          <Row>\r\n            <Col>\r\n              <EditInput\r\n                placeholder=\"Nome\"\r\n                value={data?.nativeName ?? ''}\r\n                onSave={(value) =>\r\n                  dispatch(change(countryId, 'nativeName', value))\r\n                }\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <EditInput\r\n                placeholder=\"Capital\"\r\n                value={data?.capital ?? ''}\r\n                onSave={(value) =>\r\n                  dispatch(change(countryId, 'capital', value))\r\n                }\r\n              />\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              <EditInput\r\n                placeholder=\"Área\"\r\n                value={data?.area ?? 0}\r\n                onSave={(value) => dispatch(change(countryId, 'area', value))}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <EditInput\r\n                placeholder=\"População\"\r\n                value={data?.population ?? 0}\r\n                onSave={(value) =>\r\n                  dispatch(change(countryId, 'population', value))\r\n                }\r\n              />\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              <EditInput\r\n                placeholder=\"Top-level domain\"\r\n                value={topLevelDomain}\r\n                onSave={(value) =>\r\n                  dispatch(change(countryId, 'topLevelDomains', value))\r\n                }\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <Popconfirm\r\n                placement=\"top\"\r\n                title=\"Tem certeza que deseja redefinir os dados?\"\r\n                onConfirm={() => dispatch(resetInfo(countryId))}\r\n                okText=\"Sim\"\r\n                cancelText=\"Não\"\r\n              >\r\n                <ResetButton>Redefinir informações</ResetButton>\r\n              </Popconfirm>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </ContentStyled>\r\n    </LayoutStyled>\r\n  );\r\n};\r\n\r\nexport default DetailScreen;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport CountryScreen from '~/scenes/countries';\r\nimport DetailScreen from '~/scenes/countries/details';\r\n\r\nexport interface DetailScreenParams {\r\n  countryId: string;\r\n}\r\n\r\nconst Routes: React.FC = () => (\r\n  <Router>\r\n    <Switch>\r\n      <Route path=\"/detail/:countryId\">\r\n        <DetailScreen />\r\n      </Route>\r\n      <Route path=\"/\">\r\n        <CountryScreen />\r\n      </Route>\r\n    </Switch>\r\n  </Router>\r\n);\r\n\r\nexport default Routes;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport { ThemeProvider } from 'styled-components';\nimport { ApolloProvider } from '@apollo/client';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport theme from '~/assets/colors/themes/default';\nimport client from './services/country';\nimport store from './redux/store';\nimport Routes from './components/Routes';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <Provider store={store}>\n        <ApolloProvider client={client}>\n          <Routes />\n        </ApolloProvider>\n      </Provider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}